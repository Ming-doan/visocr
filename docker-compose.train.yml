name: visocr-train

x-common-config:
  &common-config
  env_file:
    - .env
  networks:
    - visocr-main

networks:
  visocr-main:
    driver: bridge

volumes:
  postgres-data:
    driver: local

  minio-data:
    driver: local

  label-studio-data:
    driver: local

  redis-data:
    driver: local

services:
  postgres:
    <<: *common-config
    image: postgres:17-alpine
    container_name: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prefect"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    <<: *common-config
    image: minio/minio:latest
    container_name: minio
    volumes:
      - minio-data:/data
    ports:
      - 9000:9000
      - 9001:9001
    command: server --console-address ":9001" /data

  minio-init:
    <<: *common-config
    image: minio/mc:latest
    container_name: minio-init
    volumes:
      - ./docker/minio/init.sh:/minio/init.sh
    entrypoint: >
      /bin/sh /minio/init.sh
    networks:
      - visocr-main
    depends_on:
      - minio

  label-studio:
    <<: *common-config
    image: heartexlabs/label-studio:latest
    container_name: label-studio
    environment:
      DJANGO_DB: default
      POSTGRE_NAME: labelstudio
      POSTGRE_USER: ${POSTGRES_USER}
      POSTGRE_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRE_PORT: 5432
      POSTGRE_HOST: postgres
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_S3_ENDPOINT_URL: http://minio:9000
    volumes:
      - label-studio-data:/label-studio/data
      - ./docker/labelstudio:/label-studio/config
    ports:
      - 8080:8080
    command: >
      /bin/sh -c "
        /label-studio/config/init.sh &&
        label-studio
      "
    depends_on:
      - postgres
      - minio

  mlflow:
    <<: *common-config
    build:
      context: ./docker/mlflow
    container_name: mlflow
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    command: >
      mlflow server --backend-store-uri postgresql://postgres:postgres@postgres:5432/mlflow 
                    --default-artifact-root s3://mlflow-bucket/ 
                    --host 0.0.0.0
    networks:
      - visocr-main
    ports:
      - 5000:5000
    depends_on:
      - postgres
      - minio

  redis:
    <<: *common-config
    image: redis:7-alpine
    container_name: redis
    volumes:
      - redis-data:/data
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  prefect-server:
    <<: *common-config
    image: prefecthq/prefect:3-latest
    container_name: prefect-server
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/prefect
      PREFECT_SERVER_API_HOST: 0.0.0.0
      PREFECT_MESSAGING_BROKER: prefect_redis.messaging
      PREFECT_MESSAGING_CACHE: prefect_redis.messaging
      PREFECT_REDIS_MESSAGING_HOST: redis
      PREFECT_REDIS_MESSAGING_PORT: 6379
      PREFECT_REDIS_MESSAGING_DB: 0
    command: prefect server start --no-services
    ports:
      - 4200:4200
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
  prefect-services:
    <<: *common-config
    image: prefecthq/prefect:3-latest
    container_name: prefect-services
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/prefect
      PREFECT_MESSAGING_BROKER: prefect_redis.messaging
      PREFECT_MESSAGING_CACHE: prefect_redis.messaging
      PREFECT_REDIS_MESSAGING_HOST: redis
      PREFECT_REDIS_MESSAGING_PORT: 6379
      PREFECT_REDIS_MESSAGING_DB: 0
    networks:
      - visocr-main
    command: prefect server services start
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  prefect-worker:
    <<: *common-config
    image: prefecthq/prefect:3-latest
    container_name: prefect-worker
    environment:
      PREFECT_API_URL: http://prefect-server:4200/api
    networks:
      - visocr-main
    command: prefect worker start --pool local-pool
    depends_on:
      prefect-server:
        condition: service_started
